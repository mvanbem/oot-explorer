(function() {var implementors = {};
implementors["oot_explorer_core"] = [{"text":"impl&lt;'scope&gt; Copy for Collision&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for Vertex&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for Triangle&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for TriangleType&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for CameraData&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for WaterBox&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl Copy for VromAddr","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for DisplayList&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Instruction","synthetic":false,"types":[]},{"text":"impl Copy for Qu0_16","synthetic":false,"types":[]},{"text":"impl Copy for Qu10_2","synthetic":false,"types":[]},{"text":"impl Copy for Qu1_11","synthetic":false,"types":[]},{"text":"impl Copy for MtxFlags","synthetic":false,"types":[]},{"text":"impl Copy for GeometryMode","synthetic":false,"types":[]},{"text":"impl Copy for OtherModeL","synthetic":false,"types":[]},{"text":"impl Copy for OtherModeLMask","synthetic":false,"types":[]},{"text":"impl Copy for OtherModeH","synthetic":false,"types":[]},{"text":"impl Copy for OtherModeHMask","synthetic":false,"types":[]},{"text":"impl Copy for TextureFormat","synthetic":false,"types":[]},{"text":"impl Copy for TextureDepth","synthetic":false,"types":[]},{"text":"impl Copy for CombinerReference","synthetic":false,"types":[]},{"text":"impl Copy for ColorCombine","synthetic":false,"types":[]},{"text":"impl Copy for AlphaCombine","synthetic":false,"types":[]},{"text":"impl Copy for ColorInput","synthetic":false,"types":[]},{"text":"impl Copy for AlphaInput","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for UnlitVertex&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for LitVertex&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for RoomHeaderType","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for RoomHeader&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for RoomHeaderVariant&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for ActorListHeader&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for WindHeader&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for BehaviorHeader&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for MeshHeader&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for ObjectListHeader&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for TimeHeader&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for RoomSkyboxHeader&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for EndHeader&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for RoomSoundHeader&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl Copy for SceneHeaderType","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for SceneHeader&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for SceneHeaderVariant&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for StartPositionsHeader&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for CollisionHeader&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for RoomListHeader&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for RoomListEntry&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for EntranceListHeader&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for Entrance&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for SpecialObjectsHeader&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl Copy for ElfMessage","synthetic":false,"types":[]},{"text":"impl Copy for GlobalObject","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for PathwaysHeader&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for TransitionActorsHeader&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for TransitionActor&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for LightingHeader&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for SceneSkyboxHeader&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for ExitListHeader&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for Exit&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for EndHeader&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for SceneSoundHeader&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for CameraAndWorldMapHeader&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Camera","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for Actor&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for AlternateHeadersHeader&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl Copy for MeshType","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for Mesh&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for MeshVariant&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for SimpleMesh&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for SimpleMeshEntry&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl Copy for JfifMeshType","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for JfifMesh&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for JfifMeshVariant&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for SingleJfif&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for MultipleJfif&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for MultipleJfifEntry&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for Background&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for ClippedMesh&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for ClippedMeshEntry&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl Copy for ObjectId","synthetic":false,"types":[]},{"text":"impl Copy for PrimitiveType","synthetic":false,"types":[]},{"text":"impl Copy for TypeDescriptor","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Rom&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for RomAddr","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for Room&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for Scene&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'scope&gt; Copy for Lighting&lt;'scope&gt;","synthetic":false,"types":[]},{"text":"impl Copy for SegmentAddr","synthetic":false,"types":[]},{"text":"impl Copy for Segment","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Copy&gt; Copy for Slice&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Instantiate&lt;'a&gt; + ReflectSized,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for SceneTableEntry&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["oot_explorer_expr"] = [{"text":"impl Copy for Key","synthetic":false,"types":[]}];
implementors["oot_explorer_gl"] = [{"text":"impl Copy for RdpOtherMode","synthetic":false,"types":[]},{"text":"impl Copy for TextureSource","synthetic":false,"types":[]},{"text":"impl Copy for RspTextureState","synthetic":false,"types":[]},{"text":"impl Copy for Cycle","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()