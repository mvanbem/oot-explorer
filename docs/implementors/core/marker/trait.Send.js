(function() {var implementors = {};
implementors["deref_map"] = [{"text":"impl&lt;'a, T, FRef, FMut, R:&nbsp;?Sized&gt; Send for MapMut&lt;'a, T, FRef, FMut, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;FMut: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;FRef: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, F, R:&nbsp;?Sized&gt; Send for MapRef&lt;'a, T, F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Send,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["oot_explorer_core"] = [{"text":"impl&lt;'scope&gt; Send for Collision&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for Vertex&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for Triangle&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for TriangleType&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for CameraData&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for WaterBox&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, T&gt; !Send for Iter&lt;'scope, T&gt;","synthetic":true,"types":[]},{"text":"impl Send for VromAddr","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for FileSystemTableEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for LazyFileSystem&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for FileMetadata","synthetic":true,"types":[]},{"text":"impl Send for VirtualSliceError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for DisplayList&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Qu0_16","synthetic":true,"types":[]},{"text":"impl Send for Qu10_2","synthetic":true,"types":[]},{"text":"impl Send for Qu1_11","synthetic":true,"types":[]},{"text":"impl Send for MtxFlags","synthetic":true,"types":[]},{"text":"impl Send for GeometryMode","synthetic":true,"types":[]},{"text":"impl Send for OtherModeL","synthetic":true,"types":[]},{"text":"impl Send for OtherModeLMask","synthetic":true,"types":[]},{"text":"impl Send for OtherModeH","synthetic":true,"types":[]},{"text":"impl Send for OtherModeHMask","synthetic":true,"types":[]},{"text":"impl Send for CombinerReference","synthetic":true,"types":[]},{"text":"impl Send for ColorCombine","synthetic":true,"types":[]},{"text":"impl Send for AlphaCombine","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for UnlitVertex&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for LitVertex&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for Instruction","synthetic":true,"types":[]},{"text":"impl Send for TextureFormat","synthetic":true,"types":[]},{"text":"impl Send for TextureDepth","synthetic":true,"types":[]},{"text":"impl Send for ColorInput","synthetic":true,"types":[]},{"text":"impl Send for AlphaInput","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for Actor&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for AlternateHeadersHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl Send for RoomHeaderType","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for RoomHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for ActorListHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for WindHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for BehaviorHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for MeshHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for ObjectListHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for TimeHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for RoomSkyboxHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for EndHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for RoomSoundHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for RoomHeaderVariant&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl Send for SceneHeaderType","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for SceneHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for StartPositionsHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for CollisionHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for RoomListHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for RoomListEntry&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for EntranceListHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for Entrance&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for SpecialObjectsHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl Send for ElfMessage","synthetic":true,"types":[]},{"text":"impl Send for GlobalObject","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for PathwaysHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for TransitionActorsHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for TransitionActor&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for LightingHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for SceneSkyboxHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for ExitListHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for Exit&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for EndHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for SceneSoundHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for CameraAndWorldMapHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl Send for Camera","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for SceneHeaderVariant&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl Send for MeshType","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for Mesh&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for SimpleMesh&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for SimpleMeshEntry&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl Send for JfifMeshType","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for JfifMesh&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for SingleJfif&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for MultipleJfif&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for MultipleJfifEntry&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for Background&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for ClippedMesh&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for ClippedMeshEntry&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for MeshVariant&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for JfifMeshVariant&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl Send for ObjectId","synthetic":true,"types":[]},{"text":"impl Send for BitfieldDescriptor","synthetic":true,"types":[]},{"text":"impl Send for BitfieldSpan","synthetic":true,"types":[]},{"text":"impl Send for EnumDescriptor","synthetic":true,"types":[]},{"text":"impl Send for PointerDescriptor","synthetic":true,"types":[]},{"text":"impl Send for PrimitiveType","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Sourced&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for RangeSourced&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Send for StructDescriptor","synthetic":true,"types":[]},{"text":"impl Send for FieldDescriptor","synthetic":true,"types":[]},{"text":"impl Send for UnionDescriptor","synthetic":true,"types":[]},{"text":"impl Send for StructFieldLocation","synthetic":true,"types":[]},{"text":"impl Send for TypeDescriptor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for Rom&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for RomAddr","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for Room&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for Scene&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Send for Lighting&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl Send for SegmentAddr","synthetic":true,"types":[]},{"text":"impl Send for Segment","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SegmentCtx&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for SegmentResolveError","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Slice&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for SceneTableEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for MaxEffort","synthetic":true,"types":[]}];
implementors["oot_explorer_expr"] = [{"text":"impl Send for Key","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Context&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Send for ExprWithContext&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Send for Expr&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Send,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["oot_explorer_gl"] = [{"text":"impl Send for Batch","synthetic":true,"types":[]},{"text":"impl Send for DisplayListInterpreter","synthetic":true,"types":[]},{"text":"impl Send for RcpState","synthetic":true,"types":[]},{"text":"impl Send for Point","synthetic":true,"types":[]},{"text":"impl Send for Matrix","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for MatrixCol&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Send for MatrixColMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Send for RdpOtherMode","synthetic":true,"types":[]},{"text":"impl Send for CombinerState","synthetic":true,"types":[]},{"text":"impl Send for TextureSource","synthetic":true,"types":[]},{"text":"impl Send for Tile","synthetic":true,"types":[]},{"text":"impl Send for TileDimensions","synthetic":true,"types":[]},{"text":"impl Send for TileAttributes","synthetic":true,"types":[]},{"text":"impl Send for RspTextureState","synthetic":true,"types":[]},{"text":"impl Send for Tmem","synthetic":true,"types":[]},{"text":"impl Send for TmemRegion","synthetic":true,"types":[]},{"text":"impl Send for GetSourceError","synthetic":true,"types":[]},{"text":"impl Send for TmemSource","synthetic":true,"types":[]},{"text":"impl Send for Cycle","synthetic":true,"types":[]},{"text":"impl Send for ShaderState","synthetic":true,"types":[]},{"text":"impl Send for TextureState","synthetic":true,"types":[]},{"text":"impl Send for TextureParams","synthetic":true,"types":[]},{"text":"impl Send for TexCoordParams","synthetic":true,"types":[]},{"text":"impl Send for TextureDescriptor","synthetic":true,"types":[]},{"text":"impl Send for PaletteSource","synthetic":true,"types":[]},{"text":"impl Send for DecodedTexture","synthetic":true,"types":[]},{"text":"impl Send for DecodeError","synthetic":true,"types":[]}];
implementors["oot_explorer_web"] = [{"text":"impl !Send for Context","synthetic":true,"types":[]}];
implementors["scoped_owner"] = [{"text":"impl !Send for ScopedOwner","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()