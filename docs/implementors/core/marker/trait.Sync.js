(function() {var implementors = {};
implementors["deref_map"] = [{"text":"impl&lt;'a, T, FRef, FMut, R:&nbsp;?Sized&gt; Sync for MapMut&lt;'a, T, FRef, FMut, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;FMut: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;FRef: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, F, R:&nbsp;?Sized&gt; Sync for MapRef&lt;'a, T, F, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Sync,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["oot_explorer_core"] = [{"text":"impl&lt;'scope&gt; Sync for Collision&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for Vertex&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for Triangle&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for TriangleType&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for CameraData&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for WaterBox&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope, T&gt; !Sync for Iter&lt;'scope, T&gt;","synthetic":true,"types":[]},{"text":"impl Sync for VromAddr","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for FileSystemTableEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for LazyFileSystem&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for FileMetadata","synthetic":true,"types":[]},{"text":"impl Sync for VirtualSliceError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for DisplayList&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Qu0_16","synthetic":true,"types":[]},{"text":"impl Sync for Qu10_2","synthetic":true,"types":[]},{"text":"impl Sync for Qu1_11","synthetic":true,"types":[]},{"text":"impl Sync for MtxFlags","synthetic":true,"types":[]},{"text":"impl Sync for GeometryMode","synthetic":true,"types":[]},{"text":"impl Sync for OtherModeL","synthetic":true,"types":[]},{"text":"impl Sync for OtherModeLMask","synthetic":true,"types":[]},{"text":"impl Sync for OtherModeH","synthetic":true,"types":[]},{"text":"impl Sync for OtherModeHMask","synthetic":true,"types":[]},{"text":"impl Sync for CombinerReference","synthetic":true,"types":[]},{"text":"impl Sync for ColorCombine","synthetic":true,"types":[]},{"text":"impl Sync for AlphaCombine","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for UnlitVertex&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for LitVertex&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Instruction","synthetic":true,"types":[]},{"text":"impl Sync for TextureFormat","synthetic":true,"types":[]},{"text":"impl Sync for TextureDepth","synthetic":true,"types":[]},{"text":"impl Sync for ColorInput","synthetic":true,"types":[]},{"text":"impl Sync for AlphaInput","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for Actor&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for AlternateHeadersHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl Sync for RoomHeaderType","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for RoomHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for ActorListHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for WindHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for BehaviorHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for MeshHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for ObjectListHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for TimeHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for RoomSkyboxHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for EndHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for RoomSoundHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for RoomHeaderVariant&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl Sync for SceneHeaderType","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for SceneHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for StartPositionsHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for CollisionHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for RoomListHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for RoomListEntry&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for EntranceListHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for Entrance&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for SpecialObjectsHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ElfMessage","synthetic":true,"types":[]},{"text":"impl Sync for GlobalObject","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for PathwaysHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for TransitionActorsHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for TransitionActor&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for LightingHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for SceneSkyboxHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for ExitListHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for Exit&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for EndHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for SceneSoundHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for CameraAndWorldMapHeader&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl Sync for Camera","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for SceneHeaderVariant&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl Sync for MeshType","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for Mesh&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for SimpleMesh&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for SimpleMeshEntry&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl Sync for JfifMeshType","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for JfifMesh&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for SingleJfif&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for MultipleJfif&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for MultipleJfifEntry&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for Background&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for ClippedMesh&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for ClippedMeshEntry&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for MeshVariant&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for JfifMeshVariant&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl Sync for ObjectId","synthetic":true,"types":[]},{"text":"impl Sync for BitfieldDescriptor","synthetic":true,"types":[]},{"text":"impl Sync for BitfieldSpan","synthetic":true,"types":[]},{"text":"impl Sync for EnumDescriptor","synthetic":true,"types":[]},{"text":"impl Sync for PointerDescriptor","synthetic":true,"types":[]},{"text":"impl Sync for PrimitiveType","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Sourced&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for RangeSourced&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Sync for StructDescriptor","synthetic":true,"types":[]},{"text":"impl Sync for FieldDescriptor","synthetic":true,"types":[]},{"text":"impl Sync for UnionDescriptor","synthetic":true,"types":[]},{"text":"impl Sync for StructFieldLocation","synthetic":true,"types":[]},{"text":"impl Sync for TypeDescriptor","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for Rom&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for RomAddr","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for Room&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for Scene&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'scope&gt; Sync for Lighting&lt;'scope&gt;","synthetic":true,"types":[]},{"text":"impl Sync for SegmentAddr","synthetic":true,"types":[]},{"text":"impl Sync for Segment","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SegmentCtx&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for SegmentResolveError","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Slice&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for Iter&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for SceneTableEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for MaxEffort","synthetic":true,"types":[]}];
implementors["oot_explorer_expr"] = [{"text":"impl Sync for Key","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Context&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Sync for ExprWithContext&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Sync for Expr&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Sync,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["oot_explorer_gl"] = [{"text":"impl Sync for Batch","synthetic":true,"types":[]},{"text":"impl Sync for DisplayListInterpreter","synthetic":true,"types":[]},{"text":"impl Sync for RcpState","synthetic":true,"types":[]},{"text":"impl Sync for Point","synthetic":true,"types":[]},{"text":"impl Sync for Matrix","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for MatrixCol&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Sync for MatrixColMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Sync for RdpOtherMode","synthetic":true,"types":[]},{"text":"impl Sync for CombinerState","synthetic":true,"types":[]},{"text":"impl Sync for TextureSource","synthetic":true,"types":[]},{"text":"impl Sync for Tile","synthetic":true,"types":[]},{"text":"impl Sync for TileDimensions","synthetic":true,"types":[]},{"text":"impl Sync for TileAttributes","synthetic":true,"types":[]},{"text":"impl Sync for RspTextureState","synthetic":true,"types":[]},{"text":"impl Sync for Tmem","synthetic":true,"types":[]},{"text":"impl Sync for TmemRegion","synthetic":true,"types":[]},{"text":"impl Sync for GetSourceError","synthetic":true,"types":[]},{"text":"impl Sync for TmemSource","synthetic":true,"types":[]},{"text":"impl Sync for Cycle","synthetic":true,"types":[]},{"text":"impl Sync for ShaderState","synthetic":true,"types":[]},{"text":"impl Sync for TextureState","synthetic":true,"types":[]},{"text":"impl Sync for TextureParams","synthetic":true,"types":[]},{"text":"impl Sync for TexCoordParams","synthetic":true,"types":[]},{"text":"impl Sync for TextureDescriptor","synthetic":true,"types":[]},{"text":"impl Sync for PaletteSource","synthetic":true,"types":[]},{"text":"impl Sync for DecodedTexture","synthetic":true,"types":[]},{"text":"impl Sync for DecodeError","synthetic":true,"types":[]}];
implementors["oot_explorer_web"] = [{"text":"impl !Sync for Context","synthetic":true,"types":[]}];
implementors["scoped_owner"] = [{"text":"impl !Sync for ScopedOwner","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()